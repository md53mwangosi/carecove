
# =============================================================================
# CareCove - Environment Configuration Example
# =============================================================================
# Copy this file to .env and update the values according to your setup
# Never commit the actual .env file to version control!

# =============================================================================
# DJANGO CORE SETTINGS
# =============================================================================

# Secret key for Django (generate a new one for production)
# You can generate a new secret key at: https://djecrety.ir/
SECRET_KEY=django-insecure-your-secret-key-here-change-this-in-production

# Debug mode (set to False in production)
DEBUG=True

# Allowed hosts (comma-separated, no spaces)
# For production, replace with your actual domain(s)
ALLOWED_HOSTS=localhost,127.0.0.1,yourdomain.com

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# For development (SQLite is used by default)
# No additional configuration needed for SQLite

# For production (PostgreSQL recommended)
# Uncomment and configure the following line:
# DATABASE_URL=postgres://username:password@localhost:5432/carecove

# For MySQL (alternative)
# DATABASE_URL=mysql://username:password@localhost:3306/carecove

# =============================================================================
# LLM API CONFIGURATION (for AI Chatbot)
# =============================================================================

# API key for LLM services (required for chatbot functionality)
# Replace with your actual API key from your LLM provider
ABACUSAI_API_KEY=your-llm-api-key-here

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================

# Email backend for development (console backend is default)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# For production email (SMTP configuration)
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_HOST_USER=your-email@example.com
# EMAIL_HOST_PASSWORD=your-app-specific-password
# EMAIL_USE_TLS=True
# DEFAULT_FROM_EMAIL=CareCove <noreply@carecove.co.tz>

# =============================================================================
# PAYMENT GATEWAY (PESAPAL)
# =============================================================================

# Pesapal configuration for payment processing
PESAPAL_CONSUMER_KEY=your-pesapal-consumer-key
PESAPAL_CONSUMER_SECRET=your-pesapal-consumer-secret
PESAPAL_DEMO=True

# For production, set PESAPAL_DEMO=False and use live credentials

# =============================================================================
# WHATSAPP INTEGRATION
# =============================================================================

# WhatsApp contact number for customer support
# Format: +255XXXXXXXXX (include country code)
WHATSAPP_NUMBER=+255742604651

# =============================================================================
# STATIC & MEDIA FILES (for production)
# =============================================================================

# AWS S3 configuration (optional, for production static/media files)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_STORAGE_BUCKET_NAME=your-s3-bucket-name
# AWS_S3_REGION_NAME=us-east-1
# AWS_S3_CUSTOM_DOMAIN=your-cloudfront-domain.cloudfront.net

# =============================================================================
# SECURITY SETTINGS (for production)
# =============================================================================

# Security settings for production deployment
# SECURE_SSL_REDIRECT=True
# SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_HSTS_SECONDS=31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS=True
# SECURE_HSTS_PRELOAD=True
# SECURE_CONTENT_TYPE_NOSNIFF=True
# SECURE_BROWSER_XSS_FILTER=True
# SESSION_COOKIE_SECURE=True
# CSRF_COOKIE_SECURE=True

# =============================================================================
# LOGGING & MONITORING
# =============================================================================

# Log level for production
# LOG_LEVEL=WARNING

# Sentry DSN for error tracking (optional)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# =============================================================================
# CACHE CONFIGURATION (for production)
# =============================================================================

# Redis cache configuration (recommended for production)
# REDIS_URL=redis://localhost:6379/1

# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

# Default language and timezone
LANGUAGE_CODE=en-us
TIME_ZONE=Africa/Dar_es_Salaam

# =============================================================================
# CUSTOM APPLICATION SETTINGS
# =============================================================================

# Cart session expiry (in seconds)
CART_SESSION_AGE=86400

# Maximum file upload size (in bytes)
FILE_UPLOAD_MAX_MEMORY_SIZE=10485760

# =============================================================================
# SOCIAL MEDIA & ANALYTICS
# =============================================================================

# Google Analytics tracking ID (optional)
# GOOGLE_ANALYTICS_ID=UA-XXXXXXXXX-X

# Facebook Pixel ID (optional)
# FACEBOOK_PIXEL_ID=XXXXXXXXXXXXXXX

# =============================================================================
# NOTES
# =============================================================================
# 
# 1. Generate a new SECRET_KEY for production using: https://djecrety.ir/
# 2. Never use DEBUG=True in production
# 3. Always use HTTPS in production (SSL/TLS certificates)
# 4. Use a production-grade database (PostgreSQL recommended)
# 5. Configure proper email settings for transactional emails
# 6. Set up proper backup and monitoring systems
# 7. Use environment-specific values for API keys and secrets
# 8. Test all integrations in a staging environment before production
#
# For more information, see the deployment guide: deployment_guide.md
